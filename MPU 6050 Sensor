#include <Adafruit_MPU6050.h>  // Include the Adafruit_MPU6050 library to interface with the MPU6050 sensor.
#include <Adafruit_Sensor.h>  // Include the Adafruit_Sensor library, which provides a common interface for various sensors.
#include <Wire.h>  // Include the Wire library, which is necessary for I2C communication.

Adafruit_MPU6050 mpu;  // Create an object 'mpu' of class Adafruit_MPU6050 to interact with the MPU6050 sensor.

void setup(void) {
  Serial.begin(115200);  // Initialize the serial communication with a baud rate of 115200 bps.
  while (!Serial)
    delay(10); // Wait for the serial port to open (used for boards like Zero, Leonardo, etc.).

  Serial.println("Adafruit MPU6050 test!");

  // Try to initialize the MPU6050 sensor
  if (!mpu.begin()) {  // If the MPU6050 sensor is not found or failed to initialize...
    Serial.println("Failed to find MPU6050 chip");
    while (1) {
      delay(10);
    }
  }
  Serial.println("MPU6050 Found!");

  mpu.setAccelerometerRange(MPU6050_RANGE_8_G);  // Set the accelerometer range to +/- 8g.
  Serial.print("Accelerometer range set to: ");
  switch (mpu.getAccelerometerRange()) {  // Print the accelerometer range setting.
  case MPU6050_RANGE_2_G:
    Serial.println("+-2G");
    break;
  case MPU6050_RANGE_4_G:
    Serial.println("+-4G");
    break;
  case MPU6050_RANGE_8_G:
    Serial.println("+-8G");
    break;
  case MPU6050_RANGE_16_G:
    Serial.println("+-16G");
    break;
  }

  mpu.setGyroRange(MPU6050_RANGE_500_DEG);  // Set the gyro range to +/- 500 degrees per second.
  Serial.print("Gyro range set to: ");
  switch (mpu.getGyroRange()) {  // Print the gyro range setting.
  case MPU6050_RANGE_250_DEG:
    Serial.println("+- 250 deg/s");
    break;
  case MPU6050_RANGE_500_DEG:
    Serial.println("+- 500 deg/s");
    break;
  case MPU6050_RANGE_1000_DEG:
    Serial.println("+- 1000 deg/s");
    break;
  case MPU6050_RANGE_2000_DEG:
    Serial.println("+- 2000 deg/s");
    break;
  }

  mpu.setFilterBandwidth(MPU6050_BAND_5_HZ);  // Set the filter bandwidth to 5 Hz.
  Serial.print("Filter bandwidth set to: ");
  switch (mpu.getFilterBandwidth()) {  // Print the filter bandwidth setting.
  case MPU6050_BAND_260_HZ:
    Serial.println("260 Hz");
    break;
  case MPU6050_BAND_184_HZ:
    Serial.println("184 Hz");
    break;
  case MPU6050_BAND_94_HZ:
    Serial.println("94 Hz");
    break;
  case MPU6050_BAND_44_HZ:
    Serial.println("44 Hz");
    break;
  case MPU6050_BAND_21_HZ:
    Serial.println("21 Hz");
    break;
  case MPU6050_BAND_10_HZ:
    Serial.println("10 Hz");
    break;
  case MPU6050_BAND_5_HZ:
    Serial.println("5 Hz");
    break;
  }

  Serial.println("");
  delay(100);
}

void loop() {
  /* Get new sensor events with the readings */
  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);

  /* Print out the values */
  Serial.print("Acceleration X: ");
  Serial.print(a.acceleration.x);  // Print the X-axis acceleration value in m/s^2.
  Serial.print(", Y: ");
  Serial.print(a.acceleration.y);  // Print the Y-axis acceleration value in m/s^2.
  Serial.print(", Z: ");
  Serial.print(a.acceleration.z);  // Print the Z-axis acceleration value in m/s^2.
  Serial.println(" m/s^2");

  Serial.print("Rotation X: ");
  Serial.print(g.gyro.x);  // Print the X-axis rotation rate value in rad/s.
  Serial.print(", Y: ");
  Serial.print(g.gyro.y);  // Print the Y-axis rotation rate value in rad/s.
  Serial.print(", Z: ");
  Serial.print(g.gyro.z);  // Print the Z-axis rotation rate value in rad/s.
  Serial.println(" rad/s");

  Serial.print("Temperature: ");
  Serial.print(temp.temperature);  // Print the temperature value in degrees Celsius.
  Serial.println(" degC");

  Serial.println("");
  delay(500);  // Delay for 500 milliseconds before repeating the loop.
}
